
<style>
    body, .container-scroller, .container-fluid, .main-panel, .content-wrapper, .page-header, .card-body, .form-control, .btn, .card-title {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    }
</style>
<style>
    *{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}


.table-div {
    display: flex;
    justify-content: center;
    align-items: center;
    /* background-color: lightblue; */
}

.content-table{
    border-collapse: collapse;
    margin: 25px 0;
    font-size: 0.9em;
    width: 90%;
    /* min-width: 400px; */
    border-radius: 5px 5px 0 0;
    /* overflow: hidden; */
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15) ;
}

.content-table thead tr {
    background-color: lightblue;
    /* background-color: #009879; */
    position: sticky;
    top: 0;
    color: #fff;
    text-align:  left;
    font-weight: bold;
}

.content-table th,
.content-table td {
    padding: 12px 15px;
    /* max-width: 100px; */
}

.content-table tbody {
    border-bottom: 1px solid #dddddd;
}

.content-table tbody tr:nth-of-type( even ){
    background-color: #f3f3f3;
}

.content-table tbody tr {
    border-bottom: 2px solid lightblue;
    /* border-bottom: 2px solid #009879; */
}

.content-table tbody tr.active-row {
    font-weight: bold;
    color: #009879;
}


.from-to-date {
    display: flex;
    /* margin-left: 1%; */
    gap: 10px;
    align-items: center;
}

.input-date {
    padding: 5px 20px;
}

.btn-apply, button {
    padding: 8px 20px;
    color: white;
    /* background-color: rgb(95, 201, 236); */
    background-color: rgb(55, 187, 231);
    border: none;
    border-radius: 5px;
}


.btn-apply:hover, button:hover {
    background-color: rgb(33, 151, 190);
    cursor: pointer;
}


.options-container {
    display: flex;
    justify-content: space-between;
}



.sales-report-container {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 30px;
  }

  .sales-report-box {
    background-color: #e6f7ff;
    border: 1px solid #b3e0ff;
    border-radius: 5px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    text-align: center;
    width: 30%;
  }

  .sales-report-box h4 {
    margin: 10px 0;
    font-size: 16px;
    color: #333;
  }

  .sales-report-box h4 span {
    font-weight: bold;
  }

  .content-table {
    width: 100%;
    margin-right: auto;
    margin-left: auto;
}


.sales-report-div {
    width: 100%;
    margin-top: 10px;
    padding: 20px;
    border: 1px solid black;
}

.sales-report-div {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    gap: 20px;
}

.sales-report-div > div {
    flex: 1 0 45%;
    background-color: #f0f8ff; /* Light blue background */
    padding: 20px;
    /* margin-bottom: 20px; */
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.sales-report-div h3 {
    margin-bottom: 10px;
}

.product-item,
.category-item,
.payment-item,
.status-item {
    background-color: #fff; /* White background for item boxes */
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.product-item p,
.category-item p,
.payment-item p,
.status-item p {
    margin: 0;
}
</style>

<%- include('../layouts/adminHeaders.ejs') %>
    <div class="container-scroller">
      <!-- partial:../../partials/_navbar.html -->
      <%- include('../layouts/adminHeadersmid.ejs') %>
        <!-- partial -->
        <!-- partial -->
<!-- partial -->
<div class="main-panel">
    <div class="content-wrapper">
  <!-- <div class="content-wrapper"style="background-image: url('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRUZTqYvv38DZhhKiWQ4qEMiQpvB8S2zfRNp-DPYG8v-JrQqLl5_lcnD_-b8oozMh5D9Yw&usqp=CAU'); background-size: cover; background-position: center;"> -->
    <div class="page-header">
      <h3 class="page-title">
        <span class="page-title-icon bg-gradient-primary text-white me-2">
          <i class="mdi mdi-home"></i>
        </span> Sales Report
      </h3>
      
    </div>
    <div class="row">
        <div class="col-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Summary</h4>
                    <div class="sales-report-container">
                        <div class="sales-report-box bg-gradient-info text-white p-3 rounded">
                            <h5>Today:</h5>
                            <p><%= dailyStats.dailyOrderCount %> orders</p>
                            <p>Revenue: ₹<%= dailyStats.dailyRevenueAmount %></p>
                        </div>

                        <div class="sales-report-box bg-gradient-success text-white p-3 rounded">
                            <h5>This Month:</h5>
                            <p><%= monthlyStats.monthlyOrderCount %> orders</p>
                            <p>Revenue: ₹<%= monthlyStats.monthlyRevenueAmount %></p>
                        </div>

                        <div class="sales-report-box bg-gradient-warning text-white p-3 rounded">
                            <h5>This Year:</h5>
                            <p><%= yearlyStats.yearlyOrderCount %> orders</p>
                            <p>Revenue: ₹<%= yearlyStats.yearlyRevenueAmount %></p>
                        </div>
                    </div>

                    <div class="options-container mt-4">
                        <div class="form-inline">
                            <div class="form-group mb-2">
                                <label for="from-date" class="sr-only">From Date</label>
                                <input type="date" class="form-control" id="from-date" name="from-date" placeholder="From Date">
                                
                            </div>
                            <div class="form-group mx-sm-3 mb-2">
                                <label for="to-date" class="sr-only">To Date</label>
                                <input type="date" class="form-control" id="to-date" name="to-date" placeholder="To Date">
                            </div>
                            <div class="form-group mx-sm-3 mb-2">
                                <select name="report-type" id="report-type" class="form-control  input-date">
                                    <option value="custom">Custom</option>
                                    <option value="daily" selected>Daily</option>
                                    <option value="monthly">Monthly</option>
                                    <option value="yearly">Yearly</option>
                                </select>
                            </div>
                            <button class="btn btn-gradient-primary mb-2 btn-apply" type="button">Apply</button>
                        </div>

                        <div class="download-buttons mt-3">
                            <button id="generate-pdf" class="btn btn-gradient-danger">Download as PDF</button>
                            <button id="generate-excel" class="btn btn-gradient-success">Download as Excel</button>
                        </div>
                    </div>

                    <div class="sales-report-div">
                        <div>
                            <div><span>Orders : <b><span class="noOfOrders"></span></b></span></div>
                            <div><span>Revenue : <b><span class="revenueAmount"></span></b></span></div>
                        </div>
                        <div>
                            <span>Number of Users : <b><span class="noOfUsers"></span></b></span>
                        </div>
                        <div class="top-products-sale">
                            <h3>Top Products Sale</h3>
                        </div>
                        <div class="top-categories-sale">
                            <h3>Top Category Sale</h3>
                        </div>
                        <div class="payment-options">
                            <h3>Chosen Payment Option</h3>
                        </div>
                        <div class="order-status">
                            <h3>Order Status Summary</h3>
                        </div>
                    </div>

                    
                   
                </div>
            </div>
        </div>
    </div>
</div>
<!-- content-wrapper ends -->
</div>
<!-- main-panel ends -->
</div>
<!-- page-body-wrapper ends -->
</div>
<!-- container-scroller -->
<!-- plugins:js -->
<script src="/asset/vendors/js/vendor.bundle.base.js"></script>
<!-- endinject -->
<!-- Plugin js for this page -->
<script src="/asset/vendors/chart.js/chart.umd.js"></script>
<script src="/asset/vendors/bootstrap-datepicker/bootstrap-datepicker.min.js"></script>
<!-- End plugin js for this page -->
<!-- inject:js -->
<script src="/asset/js/off-canvas.js"></script>
<script src="/asset/js/misc.js"></script>
<script src="/asset/js/settings.js"></script>
<script src="/asset/js/todolist.js"></script>
<script src="/asset/js/jquery.cookie.js"></script>
<!-- endinject -->
 <script>
    
let fromDate = document.querySelector('#from-date');
let toDate = document.querySelector('#to-date');


function findReportType() {
    const reportType = document.querySelector('#report-type');
    return reportType.value;
}





const filterButton = document.querySelector('.btn-apply');
filterButton.addEventListener('click', async (event) => {

    if((fromDate.value && !toDate.value) || (!fromDate.value && toDate.value)) return failureMessage('error no date.');
    const reportType = findReportType();
    if((!fromDate.value || !toDate.value) && reportType === 'custom' ) return failureMessage('No Date selected, or change filter Type');
    
    // Construct the URL with query parameters
    const url = `/admin/sales-report/${reportType}?fromDate=${fromDate.value}&toDate=${toDate.value}`;

    const response = await fetch(url);
    const body = await response.json();
    if(body.error){
        failureMessage(body.error);
    }else {

        document.querySelector('.noOfOrders').innerHTML = body.data.noOfOrders;
        document.querySelector('.revenueAmount').innerHTML = body.data.revenueAmount;
        document.querySelector('.noOfUsers').innerHTML = body.data.noOfUsers;
        const productsDiv = document.querySelector('.top-products-sale');
        topProductsSale(body.data.productsSale, productsDiv);
        const categoryDiv = document.querySelector('.top-categories-sale');
        topCategoriesSale(body.data.topCategoryies, categoryDiv);
        const paymentMethodsDiv = document.querySelector('.payment-options');
        topPaymentOptions(body.data.paymentOptions, paymentMethodsDiv);
        const orderStatusDiv = document.querySelector('.order-status');
        displayOrderStatusSummary(body.data.orderStatus, orderStatusDiv);
    }
});



const generateReportButton = document.querySelector('#generate-pdf');
generateReportButton.addEventListener('click', async (event) => {
    const reportType = findReportType();
    if(reportType === 'custom' && (!fromDate.value || !toDate.value )) return failureMessage('select date if or change custom');

    const response = await fetch(`/admin/sales/pdf/${reportType}?fromDate=${fromDate.value}&toDate=${toDate.value}`);

    if (response.ok) {
        const blob = await response.blob();

        const url = window.URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = `sales-report${Date.now()}.pdf`;
        document.body.appendChild(a);

        a.click();

        document.body.removeChild(a);
    } else {
        console.error('Failed to generate PDF:', response.status, response.statusText);
    }
});



const generateExcelButton = document.querySelector('#generate-excel');
generateExcelButton.addEventListener('click', async (event) => {
    const reportType = findReportType();
    if(reportType === 'custom' && (!fromDate.value || !toDate.value )) return failureMessage('select date if or change custom');

    const response = await fetch(`/admin/sales/excel/${reportType}?fromDate=${fromDate.value}&toDate=${toDate.value}`);

    if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `sales-report-${reportType}-${Date.now()}.xlsx`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    } else {
      console.error('Failed to generate Excel:', response.status, response.statusText);
    }
});




document.addEventListener('DOMContentLoaded', async (event) => {
    const response = await fetch('/admin/sales-report-total');
    const body = await response.json();
    document.querySelector('.noOfOrders').innerHTML = body.data.noOfOrders;
    document.querySelector('.revenueAmount').innerHTML = body.data.revenueAmount;
    document.querySelector('.noOfUsers').innerHTML = body.data.noOfUsers;
    const productsDiv = document.querySelector('.top-products-sale');
    topProductsSale(body.data.productsSale, productsDiv);
    const categoryDiv = document.querySelector('.top-categories-sale');
    topCategoriesSale(body.data.topCategoryies, categoryDiv);
    const paymentMethodsDiv = document.querySelector('.payment-options');
    topPaymentOptions(body.data.paymentOptions, paymentMethodsDiv);
    const orderStatusDiv = document.querySelector('.order-status');
    displayOrderStatusSummary(body.data.orderStatus, orderStatusDiv);
});


function topProductsSale(products, productsDiv) {

    productsDiv.innerHTML = `<h3> Top Product Sale <h3>`;

    const productsContainerDiv = document.createElement('div'); // Create a container div to hold all product divs
    productsContainerDiv.classList.add('products-container');

    for (let i = 0; i < products.length; i++) {// Loop through each product
        let productDiv = document.createElement('div'); // Create a div for each product
        productDiv.classList.add('product-item');

        let pName = document.createElement('p'); // Create paragraph elements for product name and count
        pName.innerHTML = products[i].productName;
        let pCount = document.createElement('p');
        pCount.innerHTML = products[i].count;

        productDiv.appendChild(pName); // Append paragraph elements to the product div
        productDiv.appendChild(pCount);

        productsContainerDiv.appendChild(productDiv); // Append the product div to the container div
    }

    productsDiv.appendChild(productsContainerDiv); // Append the container div to the specified productsDiv
}


function topCategoriesSale(categories, categoryDiv) {

    categoryDiv.innerHTML = `<h3> Top Category Sale <h3>`;

    const categoryContainerDiv = document.createElement('div'); // Create a container div to hold all category divs
    categoryContainerDiv.classList.add('category-container');

    for (let i = 0; i < categories.length; i++) {// Loop through each category
        let categoryItemDiv = document.createElement('div'); // Create a div for each category
        categoryItemDiv.classList.add('category-item');

        let categoryName = document.createElement('p'); // Create paragraph elements for category name and count
        categoryName.classList.add('category-name');
        categoryName.innerHTML = categories[i].categoryName;
        let categoryCount = document.createElement('p');
        categoryCount.innerHTML = categories[i].count;
        categoryCount.classList.add('category-count');

        categoryItemDiv.appendChild(categoryName); // Append paragraph elements to the category div
        categoryItemDiv.appendChild(categoryCount);

        categoryContainerDiv.appendChild(categoryItemDiv); // Append the category div to the container div
    }

    // Check if categoryDiv exists before appending the container div
    if (categoryDiv) {
        categoryDiv.appendChild(categoryContainerDiv); // Append the container div to the specified categoryDiv
    }
}


function topPaymentOptions(paymentMethods, paymentMethodsDiv ){

    paymentMethodsDiv.innerHTML = `<h3> Top Payment Options <h3>`;

    const paymentContainerDiv = document.createElement('div'); // Create a container div to hold all payment method divs
    paymentContainerDiv.classList.add('payment-container');

    for( let i = 0; i < paymentMethods.length; i++ ) {
        let paymentItemDiv = document.createElement('div'); // Create a div for each payment method
        paymentItemDiv.classList.add('payment-item');

        let paymentMethodName = document.createElement('p'); // Create paragraph elements for payment method name and count
        paymentMethodName.innerHTML = paymentMethods[i]._id;
        let paymentMethodCount = document.createElement('p');
        paymentMethodCount.innerHTML = paymentMethods[i].count;

        paymentItemDiv.appendChild(paymentMethodName); // Append paragraph elements to the payment method div (corrected variable name)
        paymentItemDiv.appendChild(paymentMethodCount);

        paymentContainerDiv.appendChild(paymentItemDiv); // Append the payment method div to the container div
    }
    paymentMethodsDiv.appendChild(paymentContainerDiv);
}


function displayOrderStatusSummary(orderStatusSummary, orderStatusDiv) {

    orderStatusDiv.innerHTML = `<h3> Order Statuses <h3>`;

    const orderStatusContainerDiv = document.createElement('div'); // Create a container div to hold all order status divs
    orderStatusContainerDiv.classList.add('order-status-container');

    for (let i = 0; i < orderStatusSummary.length; i++) {
        let statusItemDiv = document.createElement('div'); // Create a div for each order status
        statusItemDiv.classList.add('status-item');

        let statusName = document.createElement('p'); // Create paragraph elements for status name and count
        statusName.innerHTML = orderStatusSummary[i]._id;
        let statusCount = document.createElement('p');
        statusCount.innerHTML = orderStatusSummary[i].count;

        statusItemDiv.appendChild(statusName); // Append paragraph elements to the status div
        statusItemDiv.appendChild(statusCount);

        orderStatusContainerDiv.appendChild(statusItemDiv); // Append the status div to the container div
    }

    orderStatusDiv.appendChild(orderStatusContainerDiv); // Append the container div to the specified orderStatusDiv
}




function successMessage(message) {
    Swal.fire({
      text: message,
      position: 'top',
      timer: 2000,
      background: 'green',
      color: 'white',
      showConfirmButton: false
    });
    return;
  }
  
  
  function failureMessage(message) {
    Swal.fire({
      text: message,
      position: 'top',
      timer: 2000,
      background: 'red',
      color: 'white',
      showConfirmButton: false
    });
    return;
  }
 </script>
</body>
</html>